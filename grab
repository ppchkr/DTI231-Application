import pygame
import sys
from collections import deque

# Initialize Pygame
pygame.init()

# Define Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GRAY = (200, 200, 200)

# Screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("GrabFood Simulator with Queue Management")

# Font for text
font = pygame.font.Font(None, 36)
font_small = pygame.font.Font(None, 28)

# Food items for menu
menu_items = [
    {"name": "Burger", "price": 5, "rect": pygame.Rect(100, 100, 200, 50)},
    {"name": "Pizza", "price": 8, "rect": pygame.Rect(100, 200, 200, 50)},
    {"name": "Sushi", "price": 10, "rect": pygame.Rect(100, 300, 200, 50)},
    {"name": "Pasta", "price": 7, "rect": pygame.Rect(100, 400, 200, 50)},
]

# Order details (item_name -> {"quantity": int, "price": float})
order = {}
queue = deque()  # Queue to manage orders

def draw_text(text, color, x, y, font_type=font):
    label = font_type.render(text, True, color)
    screen.blit(label, (x, y))

def draw_menu():
    screen.fill(WHITE)
    
    # Draw menu header
    draw_text("Restaurant Menu", BLACK, 300, 50)
    
    # Draw menu items
    for item in menu_items:
        pygame.draw.rect(screen, BLUE, item["rect"])
        draw_text(f"{item['name']} - ${item['price']}", WHITE, item["rect"].x + 20, item["rect"].y + 10)

def draw_order():
    draw_text("Your Order:", BLACK, 500, 50)
    
    if not order:
        draw_text("No items ordered yet.", BLACK, 500, 100)
    else:
        y_offset = 100
        total_price = 0
        for i, (name, details) in enumerate(order.items()):
            draw_text(f"{name} x {details['quantity']} - ${details['price'] * details['quantity']:.2f}", BLACK, 500, y_offset)
            y_offset += 40
            total_price += details['price'] * details['quantity']
        
        # Calculate total price
        draw_text(f"Total: ${total_price:.2f}", RED, 500, y_offset + 20)

def draw_queue():
    draw_text("Order Queue:", BLACK, 50, 500)
    if not queue:
        draw_text("No orders in queue.", BLACK, 50, 540)
    else:
        for i, queued_order in enumerate(queue):
            draw_text(f"Order {i+1}: {queued_order}", GREEN if i == 0 else BLACK, 50, 540 + i * 30)

def handle_click(pos):
    for item in menu_items:
        if item["rect"].collidepoint(pos):
            # Check if the item is already in the order
            if item["name"] in order:
                order[item["name"]]["quantity"] += 1  # Increase quantity
            else:
                order[item["name"]] = {"quantity": 1, "price": item["price"]}  # Add new item to the order

def handle_order_click(pos):
    global order
    # Check if the user clicks "Place Order" (simulate it with bottom-right click)
    place_order_rect = pygame.Rect(600, 500, 150, 50)
    if place_order_rect.collidepoint(pos) and order:
        queue.append(order.copy())  # Add current order to the queue
        order.clear()  # Clear the current order
    # Serve current order
    serve_order_rect = pygame.Rect(400, 500, 150, 50)
    if serve_order_rect.collidepoint(pos) and queue:
        queue.popleft()  # Serve the first order in the queue

def main():
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:  # Left click
                    handle_click(event.pos)  # Handle adding items to the order
                    handle_order_click(event.pos)  # Handle queue management
        
        # Draw the screen
        draw_menu()
        draw_order()
        draw_queue()

        # Draw buttons for "Place Order" and "Serve Order"
        pygame.draw.rect(screen, GREEN, pygame.Rect(600, 500, 150, 50))
        draw_text("Place Order", WHITE, 610, 515, font_small)
        pygame.draw.rect(screen, RED, pygame.Rect(400, 500, 150, 50))
        draw_text("Serve Order", WHITE, 410, 515, font_small)

        # Update display
        pygame.display.flip()

        # Set the frame rate
        pygame.time.Clock().tick(30)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
